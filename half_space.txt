Barycentric interpolation:
==========================

Given a 2D triangle ABC comprised of points:

Eq.1:    A = [Ax, Ay]
Eq.2:    B = [Bx, By]
Eq.3:    C = [Cx, Cy]

Define a point of interest:

Eq.4:    P = [Px, Py]

It's barycentric coordinates with respect to triangle ABC are a triplet of 3 "weights":

Eq.5:    α = ΔABP / ΔABC
Eq.6:    β = ΔBCP / ΔABC
Eq.7:    γ = ΔCAP / ΔABC

Each weight is how much the area of each "sub triangle" takes from the of the area of the "full" triangle.
The 3 sub-triangles are formed by connecting P to each ot the 3 combinations of 2 corners of triangle ABC.
The area of a triangle is half of the area of the parellelogram that it's corners form:

Eq.8:    ΔABC = ▱ABC / 2

Since the barycentric coordinates are all defined as ratios,
they will not be affected if all areas are multiplied by the same constant factor.
Doubling all areas gives ratios of the areas of the "parallelograms" for each triangle instead:

Eq.9 :    α = ΔABP / ΔABC = 2*ΔABP / 2*ΔABC = ▱ABP / ▱ABC
Eq.10:    β = ΔBCP / ΔABC = 2*ΔBCP / 2*ΔABC = ▱BCP / ▱ABC
Eq.11:    γ = ΔCAP / ΔABC = 2*ΔCAP / 2*ΔABC = ▱CAP / ▱ABC

Since these are trivial to compute they can be used instead of the triangle-areas.
Given that the winding order of triangle corners in 2D space is counter clockwise,
the area of the parallelogram of a triangle is:

Eq.12:    ▱ABC = ACxABy - ACyABx = (Cx - Ax)(By - Ay) - (Cy - Ay)(Bx - Ax)

From Eq.9 The first barycentric weight of point P is:

Eq.9:     α = ▱ABP / ▱ABC:

Substituting C for P gives the area of the parallelogram of triangle ABP:
Eq.13:    ▱ABP = APxABy - APyABx = (Px - Ax)(By - Ay) - (Py - Ay)(Bx - Ax)

Expanding and factoring out the coordinates of P shows that ▱ABP is a linear function of P:

Eq.14:    ▱ABP = (PxBy - PxAy - AxBy + AxAy) - (PyBx - PyAx -AyBx + AyAx)
                = PxBy - PxAy - AxBy + AxAy - PyBx + PyAx + AyBx - AyAx
                = ByPx - AyPx + AxPy - BxPy + AyBx - AxBy
                = (By - Ay)Px + (Ax - Bx)Py + (AyBx - AxBy)

This means it can be computed incrementally from an initial value(!).

Defining constants α△x and α△y as coefficients for Px and Py, and a constant offset αK:

Eq.15:    α△x = By - Ay
Eq.16:    α△y = Ax - Bx
Eq.17:    αK  = AyBx - AxBy

Gives:

Eq.18:    ▱ABP = α△xPx + α△yPy + αK

These constants can then be used to compute a new ▱ABP as P changes:
Given an initial value ▱ABP for point P(x, y) and a △x gives:

Eq.19:    ▱ABP(Px + △x) = α△x(Px + △x) + α△yPy + αK
                         = α△xPx + α△x△x + α△yPy + αK

Likewise, given an initial value ▱ABP for point P(x, y) and a △y gives:

Eq.20:    ▱ABP(Py + △y) = α△xPx + α△y(Py + △y) + αK
                         = α△xPx + α△yPy + α△y△y + αK

And so iterating over x and/or y, increasing it by 1 at each iteration,
sets △x and/or △y to 1, giving:

Eq.21:    ▱ABP(Px + 1) = α△x(Px + 1) + α△yPy + αK
                        = α△xPx + α△yPy + α△x + αK
                        = ▱ABP + α△x

Eq.22:    ▱ABP(Py + 1) = α△xPx + α△y(Py + 1) + αK
                        = α△xPx + α△yPy + α△y + αK
                        = ▱ABP + α△y

And so, coefficients α△x, α△y and αK need only be computed once for an initial coordinates of P,
and then α△x and α△y could be used as increments for the areas on each iteration of P's x and y coordinates.

However the barycentric coordinates needed here are 'ratios'
between these sub-triangle areas to the 'full' area of the triangle.
The pre-computed incremental coefficients can be made to incorporate that:

Eq.23:    α = ▱ABP / ▱ABC
            = ▱ABP * ⅟▱ABC
            = (α△xPx + α△yPy + αK)⅟▱ABC
            = (α△xPx)⅟▱ABC + (α△yPy)⅟▱ABC +(αK)⅟▱ABC
            = (⅟▱ABC(α△x))Px + (⅟▱ABC(α△y))Py + (⅟▱ABC(αK))

Thus the barycentric coordinates themselves can be made incremental:

Defining:
Eq.24:    α▱x = α△x * ⅟▱ABC = ⅟▱ABC(Ay - By)      #Ex.15
Eq.25:    α▱y = α△y * ⅟▱ABC = ⅟▱ABC(Bx - Ax)      #Ex.16
Eq.26:    α▱K = αK  * ⅟▱ABC = ⅟▱ABC(ByAx - BxAy)  #Ex.17

Gives:
Eq.27:    α(Px, Py) = (α▱x)Px + (α▱y)Py + α▱K
Eq.28:    α(Px + 1, Py) = (α▱x)(Px + 1) + (α▱y)Py + α▱K
                        = (α▱x)Px + α▱x + (α▱y)Py + α▱K
                        = (α▱x)Px + (α▱y)Py + α▱K + α▱x
                        = α + α▱x
And:
Eq.29:    α(Px, Py + 1) = (α▱x)Px + (α▱y)(Py +1) + α▱K
                        = (α▱x)Px + (α▱y)Py + α▱y + α▱K
                        = (α▱x)Px + (α▱y)Py + α▱K + α▱y
                        = α + α▱y
And more generally:
E1.30:    α(Px + △x, Py + △y) = α(Px, Py) + (△x * α▱x) + (△y * α▱y)

This can all be applied to the other 2 areas ▱BCP and ▱CAP to get incremental β and γ:

Given:
Eq.10:    β = ▱BCP / ▱ABC
And:
Eq.31:    ▱BCP = (Cy - By)Px + (Bx - Cx)Py + (ByCx - BxCy)

Defining:
Eq.32:    β△x = Cy - By
Eq.33:    β△y = Bx - Cx
Eq.34:    βK  = ByCx - BxCy
Eq.35:    β▱x = ⅟▱ABC(β△x) = ⅟▱ABC(Cy - By)
Eq.36:    β▱y = ⅟▱ABC(β△y) = ⅟▱ABC(Bx - Cx)
Eq.37:    β▱K = ⅟▱ABC(βK)  = ⅟▱ABC(ByCx - BxCy)

Gives:
E1.38:    β(Px, Py) = (β▱x)Px + (β▱y)Py + β▱K
E1.39:    β(Px + △x, Py + △y) = β(Px, Py) + (△x * β▱x) + (△y * β▱y)

Given:
Eq.11:    γ = ▱CAP / ▱ABC
And:
Eq.40:    ▱CAP = (Ay - Cy)Px + (Cx - Ax)Py + (CyAx - CxAy)

Defining:
Eq.41:    γ△x = Ay - Cy
Eq.42:    γ△y = Cx - Ax
Eq.43:    γK  = CyAx - CxAy
Eq.44:    γ▱x = ⅟▱ABC(γ△x) = ⅟▱ABC(Ay - Cy)
Eq.45:    γ▱y = ⅟▱ABC(γ△y) = ⅟▱ABC(Cx - Ax)
Eq.46:    γ▱K = ⅟▱ABC(γK)  = ⅟▱ABC(CyAx - CxAy)

Gives:
Eq.47:    γ(Px, Py) = (γ▱x)Px + (γ▱y)Py + γ▱K
Eq.48:    γ(Px + △x, Py + △y) = γ(Px, Py) + (△x * γ▱x) + (△y * γ▱y)

However, the 3 barycentric coordinates always add up to 1:
Eq.49:    α + β + γ = 1;

So in practice only 2 of them need to actually be computed.
The third could be computed as the complement of the other 2:
Eq.50:    β = 1 - α - γ

This can be factored in later when using these
computed barycentric coordinates to interpolate values:

Eq.51:   interpolated_value = αV1 + βV2 + γV3
                            = αV1 + (1 - α - γ)V2 + γV1
                            = αV1 + V2 - αV2 - γV2 + γV1
                            = αV1 - αV2 + γV1 - γV2 + V2
                            = α(V1 - V2) + γ(V3 - V2) + V2

This way, the third coordinate (in this case β) would never needs
to be computed at all, and so neither would it's coefficients and deltas.

This leaves the following values that need to be pre-computed:
==============================================================
Eq.15:    α△x = By - Ay
Eq.41:    γ△x = Ay - Cy

Eq.16:    α△y = Ax - Bx
Eq.42:    γ△y = Cx - Ax

Eq.17:    αK  = AyBx - AxBy
Eq.43:    γK  = CyAx - CxAy

All would then need to be multiplied by ⅟▱ABC which would need to be computes:
Eq.12:    ▱ABC = ACxABy - ACyABx = (Cx - Ax)(By - Ay) - (Cy - Ay)(Bx - Ax)

Notice that the first 2 component are already computed for the deltas:
Eq.52:   ▱ABC = (γ△y)(α△x) - (Cy - Ay)(Bx - Ax)

Also notice that the second 2 components had their negatives computed for the deltas:
Eq.53:   ▱ABC = (γ△y)(α△x) - (-γ△x)(-α△y)

But these 2 negatives cancel-out in their multiplication by each other:
Eq.54:   ▱ABC = (γ△y)(α△x) - (-1)(γ△x)(-1)(α△y)
               = (α△y)(α△x) - (γ△x)(α△y)(-1)(-1)
               = α△y * α△x - γ△x * α△y

Ans so:
Eq.55:   ⅟▱ABC = 1 / (α△y * α△x - γ△x * α△y)

In code, this can be efficiently accomplished in 3 steps:
1. Compute the deltas themselves (6 subtractions, 4 multiplications)
2. Use the first 4 of them to compute ⅟▱ABC (1 subtraction, 2 multiplications, 1 division)
3. Multiply all 6 deltas by ⅟▱ABC (6 multiplications)

Total setup cost:
=================
1 division
12 multiplications
7 subtractions


Perspective correct interpolation of vertex attributes:
=======================================================

Setup: (Per vertex per triangle)
--------------------------------
1. Compute '1 / v_pos_w' of all 3 vertices:
Eq.56:   v1_one_over_w = 1 / v1_pos_w
Eq.57:   v2_one_over_w = 1 / v2_pos_w
Eq.58:   v3_one_over_w = 1 / v3_pos_w

2. Compute 'v_attr_j / v_pos_w' of all 3 vertices.
Eq.59:   v1_attr_j_over_v1_pos_w = v1_attr_j * v1_one_over_w
Eq.60:   v2_attr_j_over_v2_pos_w = v2_attr_j * v2_one_over_w
Eq.61:   v3_attr_j_over_v3_pos_w = v3_attr_j * v3_one_over_w

Interpolation: (Per pixel per vertex attribute)
-----------------------------------------------
1. Linearly interpolate pixel_one_over_pos_w:
Eq.62:   pixel__one_over_pos_w = (
           α * v1_one_over_w +
           β * v2_one_over_w +
           γ * v3_one_over_w
         )
2. Linearly interpolate pixel_attr_j_over_w:
Eq.63:   pixel__attr_j_over_w = (
           α * v1_one_over_attr_j +
           β * v2_one_over_attr_j +
           γ * v3_one_over_attr_j
         )
3. Divide the results:
Eq.64:   pixel__attr_j_value = pixel__attr_j_over_w / pixel__one_over_pos_w

When the vertices of a triangle have multiple attributes,
they all need to be interpolated in the same perspective-correct way.

Optimization 1: Reusing Interpolation Step 1 results across attributes
----------------------------------------------------------------------
For a given pixel, the same value of 'pixel__one_over_pos_w' that was
computed in step 1 may be (re)used in step 3 for any/all vertex attribute(s).
And since it's always going to be "divided by", it's reciprocal
can be  (pre)computed and then be "multiplied by" instead in Interpolation Step 3.
This '1 / pixel__one_over_pos_w' value is effectively the view-space
depth of a point on the triangle that is precisely behind the pixel,
viewed through the perspective projection.

Definind:
Eq.65:   z_behind_pixel = 1 / pixel__one_over_pos_w

Step 1 then becomes: (pre-computed per-pixel before interpolation)
Eq.66:   z_behind_pixel = 1 / (
           α * v1_one_over_w +
           β * v2_one_over_w +
           γ * v3_one_over_w
         )

Step 3 then become: (for a given interpolating vertex attribute 'j')
Eq.67:   pixel_attr_j_value = pixel__attr_j_over_w * z_behind_pixel

Optimization 2: Eliminating Setup Step 2
----------------------------------------
For a given pixel, the value(s) of 'v(i)_one_over_w' are the same across
any/all interpolating attributes, and so they may be re-used across them.

Interpolation Step 2 can be re-written as:
Eq.68:   pixel__attr_j_over_w = (
           α * (v1_attr_j * v1_one_over_w) +
           β * (v2_attr_j * v2_one_over_w) +
           γ * (v3_attr_j * v3_one_over_w)
         )

Which is equivalent to:
Eq.69:   pixel__attr_j_over_w = (
           v1_attr_j * (α * v1_one_over_w) +
           v2_attr_j * (β * v2_one_over_w) +
           v3_attr_j * (γ * v3_one_over_w)
         )

Ans so the barycentric coordinates themselves may therefore be
(pre)multiplied by 'v(i)_one_over_w' before interpolation:

Defining:
Eq.70:   αPC = α * v1_one_over_w
Eq.71:   βPC = β * v2_one_over_w
Eq.72:   γPC = γ * v3_one_over_w

Step 2 of interpolation then becomes: (for a given vertex attribute 'j')
Eq.73:   pixel__attr_j_over_w = (
           αPC * v1_attr_j +
           βPC * v2_attr_j +
           γPC * v3_attr_j
         )

This effectively eliminates the need for Step 2 of the setup
for each interpolating vertex attribute(s) on all vertices.


Rasterization rules: (Top-left)
===============================
The convention used here for the rules of tasterization (a.k.a: "shadow rules")
follow the "Top Left" rules (a-la DX*).
It excludes pixels that lie exactly on an edge that isn't top/left.
It relies on the observation that as winding order is consistent across all faces,
any shared edge would have opposing directions across the 2 faces that share it.
This can be determined by checking how each edge's vertex positions relate to each other.
Horizontal and vertical edges are accounted by having each edge check include
both vertical and horizontal checks (such that whenever one doesn't apply, the other would).
Using a CCW winding order, the top-left rules states that pixels who's centers lie
precicely on any given edge are included, if-and-only-if the edge goes either
top-to-bottom or right-to-left-flat (horizontally).
* For more details, see:
https://docs.microsoft.com/en-us/windows/win32/direct3d11/d3d10-graphics-programming-guide-rasterizer-stage-rules
